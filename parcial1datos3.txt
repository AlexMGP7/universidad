//Este ejercicio dice que se compruebe si "una cifra es capicua", entonces, una cifra cualquiera
//puede ser "1", por lo tanto, el ejercicioo esta mal redactado, y se quiere referir a
//comprobar un conjunto de cifras (ej:"1234"), o tambien que sea un trampa y en realidad el Metodo
//simplemente es leer una cifra y decir que es capicua porque siempre lo ser√°
//En este caso asumire que se quiere referir a un conjunto de cifras

1.Metodo Capicua (Arreglo E, TAM_ARR):Cadena //El size de la pila es el mismo del arreglo
    CONSTANTES
    VARIABLES

    TDA_Pila P      //Se declara el tipo de dato abstracto pila como P (Herencia)
    Entero i <- 1   //Declaramos el contador en 1 por ser pseudocodigo
    Cadena S
    INICIO
    Repetir
        P.Push (P, E[i])
        i<-i+1
    Hasta i = TAM_ARR

    Repetir
        S <- S + P.Cima (P)
        P.Pop(P)
    Hasta P.Vacia(P)

    i = 1
    Repetir
        Si E[i] != S[i] entonces
            Capicua <- Falso
        Sino
            Capicua <- Verdadero
        i = i + 1

2.Metodo Ackerman
//A(0,n) = n+1
//A(m+1,0) = A(m,1)
//A(m+1,n+1) = A(m,A(m+1,n))

    CONSTANTES
    VARIABLES

    TDA_Pila P
    entero m

    INICIO

    P.Push(m,P)
    Mientras no(P.Vacia) Hacer
        m <- P.Cima(P)
        P.Pop(P)
        Si m=0 entonces
            n <- n+1
        Sino
            Si  n=0 entonces
                n <- 1
                P.Push(m-1,P)
        Sino
                n <- n-1
                P.Push(m-1,P)
                P.Push(m,P)
    Ackerman <- n