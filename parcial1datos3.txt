1.Metodo Capicua (entero cifras) -> boolean
    CONSTANTES
    VARIABLES
    boolean Comprobar //Variable para poder devolver el valor boolean (funciona como auxiliar)
    entero aux //Auxiliar para no perder el dato
    TDA_Pila P //Se hereda la pila

    INICIO
        Mientras cifras > 0 //Mientras que la cifra sea mayor a 0 entonces se va agregando a la pila
            P.Push(P, cifras % 10)
            cifras <-  cifras / 10
        FinMientras

        Comprobar <- Verdadero

        Mientras (Comprobar = Verdadero) //Se comprueba si es capicua
            Si (cifras % 10) = P.Top
                P.Pop(P,Top)
                cifras <- cifras / 10
            Sino
                Comprobar = Falso
        FinMientras

        Capicua <- Comprobar

FinMetodo

2.Metodo Ackerman(entero m, entero n)
//A(0,n) = n+1
//A(m+1,0) = A(m,1)
//A(m+1,n+1) = A(m,A(m+1,n))

    CONSTANTES
    VARIABLES

    TDA_Pila P

    INICIO

    P.Push(P,m) //Se agrega m a la pila
    Mientras no(P.Vacia) Hacer //Mientras que la pila no vacia, se repite
        m <- P.Cima(P) // a m se le asigna el tope de la pila
        P.Pop(P)
        Si m=0 entonces //condicional de la funcion Ackerman
            n <- n+1
        Sino
            Si  n=0 entonces
                n <- 1
                P.Push(P,m-1) //Se usa recursion en la pila
        Sino
                n <- n-1
                P.Push(P,m-1)//Se usa recursion en la pila
                P.Push(P,m)
    Ackerman <- n //Ackerman devuelve el valor n
FinMetodo

3.TDA_Multi_Pilas = Clase de //Se utiliza un arreglo para meter las pilas, en este caso una de derecha a izquiera y otra al reves
    // Atributos
    entero MAX_PILA
    entero Top1 <- 0
    entero Top2 <- MAX_PILA
    arreglo multi[MAX_PILA]

    // Metodos
    Metodo Llena -> boolean //Metodo para saber si la pila esta llena
    INICIO
        Si (multi[Top1+1]) = multi[Top2]
            Llena <- Verdadero
        Sino
            Llena <- Falso
        Finsi
    FinMetodo

    Metodo Cima1 (TDA_Multi_Pilas multi[]) //Saber el valor del tope de la pila 1
    INICIO
        Si no (Vacia(P)) entonces
            Cima1 <- P.multi[Top1]
        Sino
            Escribir ("Pila Vacia")
        Finsi
    FinMetodo

    Metodo Cima2(TDA_Multi_Pilas P[])//Saber el valor del tope de la pila 2
    INICIO
        Si no (Vacia(P)) entonces
            Cima2 <- P.s[Top2]
        Sino
            Escribir ("Pila Vacia")
        Finsi
    FinMetodo

    Metodo Vacia (tda_pila p) -> boolean //Saber si la pila esta Vacia
    INICIO
        Si (Top1=0 ^ Top2=Tamaño_Arr) entonces
            Vacia <- Verdadero
        Sino
            Vacia <- Falso
        Finsi
    FinMetodo

    Metodo Push1(TDA_Multi_Pilas, entero E) //Meter un nodo en la pila 1
        INICIO
        Si no(Llena (P.multi[])) entonces //si no está Llena
            Top1<- Top1+1
            P.M[Top1]<- E
        Sino
            Escribir ("Pila llena")
        Finsi
    FinMetodo

    Metodo Pop1(TDA_Multi_Pilas)
        INICIO
        Si no (Vacia (p.multi[])) entonces
            Top1<- Top1-1
        Sino
            Escribir ("Pila llena")
        Finsi
        FinMetodo

    Metodo Push2(TDA_Multi_Pilas, entero E)
        INICIO
        Si no (Llena (P.multi[])) entonces //si no está Llena
            Top2<- Top2-1
            P.M[Top1]<- E
        Sino
            Escribir ("Pila llena")
        Finsi
    FinMetodo

    Metodo Pop2(TDA_Multi_Pilas)
        INICIO
        Si no (Vacia (p.multi[])) entonces
            Top2<- Top2+1
        Sino
            Escribir ("Pila llena")
        Finsi
    FinMetodo
FinClase

4.TDA_CM = Clase de
    // Atributos del nodo
    Caracter clase_sos
    ˆTDA_CM sig,ant
FinClase

ColaMD = Clase de
    ˆTDA_CM Frente //Salida
    ˆTDA_CM E_Plebeyo,E_Noble //Entradas
    ˆTDA_CM CM // Bicola contenedora
    // Metodos

    Metodo Desencolar (ColaMD X) //Metodo para desencolar de la Pila
    CONSTANTES
    VARIABLES
        ˆTDA_CM Aux //Auxiliar para no perjudicar el dato q necesitamos
    INICIO
        Si no(Vacia(X)) entonces
            Caso Frente.clase_sos sea:
                '1':Si no(Frente = Nulo)  //Si no hay valor en frente entonces
                        Aux <- Frente
                        Si (Frente = E_Noble) entonces
                            Frente <- Nulo //Si el frente es un noble se le asigna nulo
                        Sino
                            Frente <- Frente.ˆsig
                        FinSi
                    Sino
                        Escribir "No hay ninguna persona a la cual atender"
                    FinSi
                '2':Si (E_Noble = Nulo) entonces //Si no hay noble entonces
                        Aux <- Frente
                        Si (Frente = E_Plebeyo) entonces
                            Frente <- Nulo
                        Sino
                            Frente <- Frente.ˆsig
                        FinSi
                    Sino
                        Escribir "No es posible eliminarse, hay nobles sin atender"
                    FinSi
            FinCaso
        Sino
            Escribir "No hay personas para atender"
        FinSi
    FinMetodo

    Metodo Encolar (ColaMD X,ˆTDA_CM E,entero n) //Metodo para encolar
    CONSTANTES
    VARIABLES
    INICIO
        Si (Vacia(X)) entonces
            Caso n sea: //El caso 1 es noble y el P es plebeyo, asi con todos
                '1':X.E_Noble <- E //A noble de la bicola se la asigna el nodo entrante
                    X.Frente <- E //A el frente de la bicola se le asigna el nodo entrante
                '2':X.E_Plebeyo <- E //A plebeyo de la bicola se le asigna el nodo entrante
                    X.Frente <- E //A el frente de la bicola se le asigna el nodo entrante
                FinCaso
                X.Insertar_Inicio(X,E)//Se inserta en la bicola el nodo entrante
        Sino
            Caso n sea:
                '1':Si (Frente.clase_sos = 'P') entonces //Si el frente es un plebeyo entonces
                        X.E_Noble <- E //A noble de la bicola se la asigna el nodo entrante
                        X.Frente <- E //A el frente de la bicola se le asigna el nodo entrante
                    Sino
                        X.E_Noble <- E //A noble de la bicola se la asigna el nodo entrante
                    FinSi
                '2':X.E_Plebeyo <- E //A plebeyo de la bicola se la asigna el nodo entrante
            FinCaso
            X.Insertar_Fin_Seg(X,E) //Se inserta en la bicola el nodo entrante
        FinSi
    FinMetodo

FinClase

5.Tda_nodo = Clase de
    Cadena Valor
    ^Tda_nodo sig,ant
Fin Clase

Metodo Verificador(Tda_cola A,Tda_cola B) -> boolean
CONSTANTES
VARIABLES
    boolean resultado //auxiliar
    Tda_nodo N //Se hereda el nodo
INICIO
    Mientras (no (B.Vacia(B)) || no (resultado = Falso)) //Mientrasla pila no este vacia o el verificador sea falso
        Si B.Frente = 'X' //Si el frente en b vale X entonces se desencola en a
            Si no (A.Vacia(A))
                A.desencolar(A)
            Sino
                Escribir "No funciona"
                resultado <- Falso
                Verificador <- resultado //Devuelve que no se pudo verificar
        Si B.Frente = 'S' //Si el frente de b es S entonces se desencola en b
            A.Encolar(A,N.valor <- '#')
        b.desencolar(B)
    FinMientras
    Verificador = Verdadero <- Si no se devuelve el verificador en falso entonces es verdadero

6.TDA_colaCM = Clase de //La cola con 2 frentes y la estructura
    ^Fte_baja_pri
    ^Fte_alta_pri
    ^Nodo LDE Bi

TDA_persona = Clase de
    //VARIABLES
    entero llegada
    entero prioridad
    ^TDA_persona sig,ant

//Metodo
Metodo Simulacion (TDA_colaCM CPSI, entero T)
CONSTANTES
VARIABLES
    Entero Humor // estado de animo 0 molesto 1 feliz
    Entero i

INICIO
    T = T * 60 // cada ciclo es un minuto
    Para i hasta i = T paso 1
        Humor <- random (0,1)
        Persona.llegada <- random (0,1)   // Se comprueba la llegada
        Persona.prioridad <- random (0,1)  // Se genera su prioridad

        Si persona.llegada = 1 // si llega una persona se mete a la cola
            CPSI.Encolar(CPSI, persona_e)

        Mientras CPSI no Vacia(CPSI) && Humor = 0 // si no esta vacia el Humor esta bajo atiende a la gente de baja prioridad
            Si persona_e.prioridad = 0
                CPSI.desencolar(persona_e)

        Mientras CPSI no Vacia(CPSI) && Humor = 1 // si no esta vacia el Humor esta alto atiende a la gente de alta prioridad
        Si persona_e.prioridad = 1
            CPSI.desencolar(persona_e)
    FinPara
FinMetodo
