//Este ejercicio dice que se compruebe si "una cifra es capicua", entonces, una cifra cualquiera
//puede ser "1", por lo tanto, el ejercicioo esta mal redactado, y se quiere referir a
//comprobar un conjunto de cifras (ej:"1234"), o tambien que sea un trampa y en realidad el Metodo
//simplemente es leer una cifra y decir que es capicua porque siempre lo ser치
//En este caso asumire que se quiere referir a un conjunto de cifras

1.Metodo Capicua (entero cifras) -> boolean
    CONSTANTES
    VARIABLES
    boolean Comprobar
    entero aux
    TDA_Pila P

    INICIO
        Mientras cifras > 9
            P.Push(P, cifras % 10)
            cifras <-  cifras / 10
        FinMientras

        P.Push(P,cifras)
        Comprobar <- Verdadero

        Mientras (Comprobar = Verdadero)
            Si (cifras % 10) = P.Top
                P.Pop(P,Top)
                cifras <- cifras / 10
            Sino
                Comprobar = Falso
        FinMientras

        Capicua <- Comprobar

FinMetodo

2.Metodo Ackerman(entero m, entero n)
//A(0,n) = n+1
//A(m+1,0) = A(m,1)
//A(m+1,n+1) = A(m,A(m+1,n))

    CONSTANTES
    VARIABLES

    TDA_Pila P

    INICIO

    P.Push(P,m)
    Mientras no(P.Vacia) Hacer
        m <- P.Cima(P)
        P.Pop(P)
        Si m=0 entonces
            n <- n+1
        Sino
            Si  n=0 entonces
                n <- 1
                P.Push(P,m-1)
        Sino
                n <- n-1
                P.Push(P,m-1)
                P.Push(P,m)
    Ackerman <- n
FinMetodo

3.TDA_Multi_Pilas = Clase de
    // Atributos
    entero MAX_PILA
    entero Top1 <- 0
    entero Top2 <- MAX_PILA
    arreglo multi[MAX_PILA]

    // Metodos
    Metodo Llena -> boolean
    INICIO
        Si multi[Top1+1] = multi[Top2]
            Llena <- Verdadero
        Sino
            Llena <- Falso
        Finsi
    FinMetodo

    Metodo Cima1 (TDA_Multi_Pilas multi[])
    INICIO
        Si no (Vacia(P)) entonces
            Cima1 <- P.multi[Top1]
        Sino
            Escribir ('pila vacia')
        Finsi
    FinMetodo

    Metodo Cima2(TDA_Multi_Pilas P[])
    INICIO
        Si no (Vacia(P)) entonces
            Cima2 <- P.s[Top2]
        Sino
            Escribir ('pila vacia')
        Finsi
    FinMetodo

    Metodo vacia (tda_pila p) -> boolean
    INICIO
        Si (Top1=0 ^ Top2=Tama침o_Arr) entonces
            vacia <- Verdadero
        Sino
            vacia <- Falso
        Finsi
    FinMetodo

    Metodo Push1(TDA_Multi_Pilas, entero E)
        INICIO
        Si no(Llena (P.multi[])) entonces //si no est치 Llena
            Top1<- Top1+1
            P.M[Top1]<- E
        Sino
            Escribir ('stack overflow ')
        Finsi
    FinMetodo

    Metodo Pop1(TDA_Multi_Pilas)
        INICIO
        Si no (vacia (p.multi[])) entonces
            Top1<- Top1-1
        Sino
            Escribir ('stack underflow ')
        Finsi
        FinMetodo

    Metodo Push2(TDA_Multi_Pilas, entero E)
        INICIO
        Si no (Llena (P.multi[])) entonces //si no est치 Llena
            Top2<- Top2-1
            P.M[Top1]<- E
        Sino
            Escribir ('stack overflow ')
        Finsi
    FinMetodo

    Metodo Pop2(TDA_Multi_Pilas)
        INICIO
        Si no (vacia (p.multi[])) entonces
            Top2<- Top2+1
        Sino
            Escribir ('stack underflow ')
        Finsi
    FinMetodo
FinTDA